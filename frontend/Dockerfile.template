FROM --platform=$BUILDPLATFORM node:16-alpine AS build-dep

RUN apk update && \
    apk add git openssh jq && \
    rm -vrf /var/cache/apk/*

FROM build-dep AS builder
ENV CI=1

# Set working directory
WORKDIR /usr/src/app

# .rc files
{{ if (file.Exists ".npmrc") }}COPY .npmrc ./{{ end }}
{{ if (file.Exists ".yarnrc") }}COPY .yarnrc ./{{ end }}

# Package Manager Check
{{ if (file.Exists "package-lock.json") }}RUN echo "Error: it appears that you are using 'npm' as your package manager, please switch to 'yarn' instead."; exit 1{{ else }}# All good!{{ end }}
{{ if (file.Exists "yarn.lock") }}
# Install dependencies
COPY package.json yarn.lock ./

RUN echo "Install dependencies" \
    ; yarn install \
    ; yarn cache clean

# RUN --mount=type=secret,id=github_pkg_token \
#     echo "Install dependencies" \
#     ; npm config set "//npm.pkg.github.com/:_authToken" "$(cat /run/secrets/github_pkg_token)" \
#     ; yarn install \
#     ; yarn cache clean \
#     ; npm config delete "//npm.pkg.github.com/:_authToken"
{{ end }}
# Generate third party licenses
RUN npx generate-license-file \
    --input package.json \
    --output third-party-licenses.txt

FROM builder AS app

# Transfer environment files
COPY .env ./

# Transfer project source to Docker context
{{ if (file.Exists ".browserslistrc") }}COPY .browserslistrc ./{{ end }}
{{ if (file.Exists ".eslintrc") }}COPY .eslintrc ./{{ end }}
{{ if (file.Exists ".eslintignore") }}COPY .eslintignore ./{{ end }}
{{ if (file.Exists "babel.config.js") }}COPY babel.config.js ./{{ end }}
{{ if (file.Exists "vue.config.js") }}COPY vue.config.js ./{{ end }}

# Transfer source code to Docker context
COPY public ./public
COPY src ./src

# Automatic platform ARGs
# This feature is only available when using the BuildKit backend.
ARG TARGETPLATFORM
ARG TARGETOS
ARG TARGETARCH
ARG TARGETVARIANT
ARG BUILDPLATFORM
ARG BUILDOS
ARG BUILDARCH
ARG BUILDVARIANT

# Docker Metadata Actions
ARG DOCKER_META_IMAGES
ARG DOCKER_META_VERSION
ENV DOCKER_META_IMAGES=${DOCKER_META_IMAGES}
ENV DOCKER_META_VERSION=${DOCKER_META_VERSION}

# GitHub Metadata Action
ARG GITHUB_ACTOR="gihtub-action[bot]"
ARG GITHUB_BASE_REF
ARG GITHUB_HEAD_REF
ARG GITHUB_JOB
ARG GITHUB_REF="refs/heads/main"
ARG GITHUB_REF_NAME=main
ARG GITHUB_REF_PROTECTED
ARG GITHUB_REF_TYPE=branch
ARG GITHUB_REPOSITORY="owner/repo"
ARG GITHUB_REPOSITORY_OWNER="gihtub-action[bot]"
ARG GITHUB_RUN_ATTEMPT
ARG GITHUB_RUN_ID
ARG GITHUB_SHA
ARG RUNNER_ARCH=${BUILDARCH}
ARG RUNNER_NAME=${HOSTNAME}
ARG RUNNER_OS=${BUILDOS}

ENV GITHUB_ACTOR=${GITHUB_ACTOR}
ENV GITHUB_BASE_REF=${GITHUB_BASE_REF}
ENV GITHUB_HEAD_REF=${GITHUB_HEAD_REF}
ENV GITHUB_JOB=${GITHUB_JOB}
ENV GITHUB_REF=${GITHUB_REF}
ENV GITHUB_REF_NAME=${GITHUB_REF_NAME}
ENV GITHUB_REF_PROTECTED=${GITHUB_REF_PROTECTED}
ENV GITHUB_REF_TYPE=${GITHUB_REF_TYPE}
ENV GITHUB_REPOSITORY=${GITHUB_REPOSITORY}
ENV GITHUB_REPOSITORY_OWNER=${GITHUB_REPOSITORY_OWNER}
ENV GITHUB_RUN_ATTEMPT=${GITHUB_RUN_ATTEMPT}
ENV GITHUB_RUN_ID=${GITHUB_RUN_ID}
ENV GITHUB_SHA=${GITHUB_SHA}
ENV RUNNER_ARCH=${RUNNER_ARCH}
ENV RUNNER_NAME=${RUNNER_NAME}
ENV RUNNER_OS=${RUNNER_OS}

# Add buildpack
# https://github.com/soramitsukhmer/docker-buildpack
ARG SORA_BUILDPACK_VERSION=v0.1.0
ADD https://raw.githubusercontent.com/soramitsukhmer/docker-buildpack/${SORA_BUILDPACK_VERSION}/nodejs/vue2/buildpack /usr/bin/buildpack
RUN chmod +x /usr/bin/buildpack

# Build application
RUN buildpack

FROM --platform=$BUILDPLATFORM ghcr.io/soramitsukhmer/nginx-fe:1.23

# Copy the application from builder stage
COPY --from=app /usr/src/app/dist /var/www/public

# Copy third party licenses
COPY --from=app /usr/src/app/third-party-licenses.txt /var/www/public

# Docker Metadata Actions
ARG DOCKER_META_VERSION
LABEL version="$DOCKER_META_VERSION"
{{ if (file.Exists "rootfs") }}
# Transfer project rootfs
ADD rootfs /
{{ end }}
# Web Platform Metadata
RUN echo "# Web Platform Metadata" > /etc/WEB_PLATFORM_METADATA \
    ; echo "WEB_PLATFORM_VERSION=${DOCKER_META_VERSION}" >> /etc/WEB_PLATFORM_METADATA

# Webenv runtime environment
#
# This variables used by gomplate template renderer
# See rootfs/etc/gomplate/templates/config.env
ENV NBC_PLATFORM_ENV=local
ENV NBC_PLATFORM_VERSION=X.X.X-untagged

# The API_BASE_URL are now deprecated
# Please use BACKEND_ADDR instead
ENV API_BASE_URL=http://backend:8765
ENV BACKEND_ADDR=${API_BASE_URL}
